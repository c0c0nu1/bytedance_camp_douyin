// Code generated by hertz generator.

package relation

import (
	"context"
	"fmt"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/cache"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/dal"
	"github.com/linzijie1998/bytedance_camp_douyin/biz/model/douyin/base"
	"github.com/linzijie1998/bytedance_camp_douyin/global"
	"github.com/linzijie1998/bytedance_camp_douyin/util"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	relation "github.com/linzijie1998/bytedance_camp_douyin/biz/model/douyin/relation"
)

const (
	RelationActionFollow = 1
	RelationActionCancel = 2
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.RelationActionResp)

	rawID, exists := c.Get("token_user_id")
	if !exists {
		global.DOUYIN_LOGGER.Debug("未从上下文中解析到USERID")
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID := int64(rawID.(uint))

	// 查询是否关注了该用户
	isFollow, err := cache.GetFollowState(userID, req.ToUserID)
	if err != nil {
		global.DOUYIN_LOGGER.Debug(fmt.Sprintf("关系数据查询失败 err: %v", err))
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	if req.ActionType == RelationActionFollow {
		if isFollow {
			global.DOUYIN_LOGGER.Info(fmt.Sprintf("ID为%d的用户尝试重复关注ID为%d的用户", userID, req.ToUserID))
			resp.StatusCode = 1
			c.JSON(consts.StatusBadRequest, resp)
			return
		}
		if err := cache.UpdateFollowState(userID, req.ToUserID, true); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("关系数据更新失败 err: %v", err))
			resp.StatusCode = 1
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
		if err := cache.UpdateFollowerState(req.ToUserID, userID, true); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("关系数据更新失败 err: %v", err))
			resp.StatusCode = 1
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
	} else if req.ActionType == RelationActionCancel {
		if !isFollow {
			global.DOUYIN_LOGGER.Info(fmt.Sprintf("ID为%d的用户尝试取消关注未关注的ID为%d的用户", userID, req.ToUserID))
			resp.StatusCode = 1
			c.JSON(consts.StatusBadRequest, resp)
			return
		}
		if err := cache.UpdateFollowState(userID, req.ToUserID, false); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("关系数据更新失败 err: %v", err))
			resp.StatusCode = 1
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
		if err := cache.UpdateFollowerState(req.ToUserID, userID, false); err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("关系数据更新失败 err: %v", err))
			resp.StatusCode = 1
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
	} else {
		global.DOUYIN_LOGGER.Info(fmt.Sprintf("错误的关系操作 action_type: %d", req.ActionType))
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.RelationFollowListResp)

	if req.Token == "" {
		c.JSON(consts.StatusOK, resp)
		return
	}
	j := util.NewJWT()
	claim, err := j.ParseToken(req.Token)
	if err != nil {
		global.DOUYIN_LOGGER.Info(fmt.Sprintf("Token解析失败 err: %v", err))
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID := int64(claim.UserInfo.ID)

	followIDs, err := cache.QueryFollowByUserID(userID)
	if err != nil {
		global.DOUYIN_LOGGER.Debug(fmt.Sprintf("关注着数据查询失败 err: %v", err))
	}

	userList := make([]*base.User, len(followIDs))

	for i, followID := range followIDs {
		userInfos, err := dal.QueryUserInfoByUserID(followID)
		if err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询用户信息失败: %v", err))
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
		if len(userInfos) != 1 {
			global.DOUYIN_LOGGER.Warn(fmt.Sprintf("查询到%d条的ID为%d的用户信息", len(userInfos), req.UserID))
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}

		followCnt, _ := cache.GetFollowCount(int64(userInfos[0].ID))
		followerCnt, _ := cache.GetFollowerCount(int64(userInfos[0].ID))

		var user base.User
		user.ID = int64(userInfos[0].ID)
		user.Name = userInfos[0].Name
		user.FollowCount = &followCnt
		user.FollowerCount = &followerCnt
		userList[i] = &user
	}

	resp.UserList = userList
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowerListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.RelationFollowerListResp)
	if req.Token == "" {
		c.JSON(consts.StatusOK, resp)
		return
	}
	j := util.NewJWT()
	claim, err := j.ParseToken(req.Token)
	if err != nil {
		global.DOUYIN_LOGGER.Info(fmt.Sprintf("Token解析失败 err: %v", err))
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID := int64(claim.UserInfo.ID)

	followIDs, err := cache.QueryFollowerByUserID(userID)
	if err != nil {
		global.DOUYIN_LOGGER.Debug(fmt.Sprintf("粉丝数据查询失败 err: %v", err))
	}

	userList := make([]*base.User, len(followIDs))

	for i, followID := range followIDs {
		userInfos, err := dal.QueryUserInfoByUserID(followID)
		if err != nil {
			global.DOUYIN_LOGGER.Debug(fmt.Sprintf("查询用户信息失败: %v", err))
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}
		if len(userInfos) != 1 {
			global.DOUYIN_LOGGER.Warn(fmt.Sprintf("查询到%d条的ID为%d的用户信息", len(userInfos), req.UserID))
			c.JSON(consts.StatusInternalServerError, resp)
			return
		}

		followCnt, _ := cache.GetFollowCount(int64(userInfos[0].ID))
		followerCnt, _ := cache.GetFollowerCount(int64(userInfos[0].ID))

		var user base.User
		user.ID = int64(userInfos[0].ID)
		user.Name = userInfos[0].Name
		user.FollowCount = &followCnt
		user.FollowerCount = &followerCnt
		userList[i] = &user
	}

	resp.UserList = userList
	c.JSON(consts.StatusOK, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFriendListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.RelationFriendListResp)

	c.JSON(consts.StatusOK, resp)
}
